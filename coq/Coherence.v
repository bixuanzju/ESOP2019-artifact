
Require Import Infrastructure.
Require Import SourceProperty.
Require Import LR.
Require Import Compatibility.


(* ********************************************************************** *)
(** * Fundamental property *)

Theorem fundamental_prop:  forall Δ Γ E A e e' dir,
    has_type Δ Γ E dir A e ->
    has_type Δ Γ E dir A e' ->
    E_open Δ Γ e e' A A.
Proof with eauto using swft_wft, swfe_wfe, elaboration_well_type, subtype_well_type, swft_from_swfe, swfe_notin.
  introv Ty1. gen e'.
  induction Ty1; introv Ty2.

  - Case "top".

    apply top_compatibility...

  - Case "lit".
    inverts Ty2.
    apply lit_compatibility...

  - Case "var".
    inverts Ty2.
    apply var_compatibility...

  - Case "app".
    inverts Ty2 as.
    introv Ty1 Ty2.
    lets H: inference_unique Ty1_1 Ty1.
    inverts H.
    forwards : IHTy1_1...
    forwards : IHTy1_2...
    eapply app_compatibility...

  - Case "merge".
    inverts Ty2 as Ty1 Ty2 ?.
    forwards : IHTy1_1 Ty1.
    forwards : IHTy1_2 Ty2.
    eapply pair_compatibility...

  - Case "anno".
    inverts Ty2.
    eapply IHTy1...

  - Case "tabs".
    inverts Ty2.
    pick_fresh X.
    eapply tabs_compatibility...
    forwards : H0...
    assert (Wfte : swfte ([(X, A)] ++ DD))...
    inverts Wfte...

  - Case "tapp".
    inverts Ty2 as TT ? Dis ?.
    forwards Eq : inference_unique Ty1 TT.
    forwards (? & ?) : disjoint_regular Dis.
    inverts Eq.
    forwards : IHTy1...
    eapply tapp_compatibility...

  - Case "rcd".
    inverts Ty2.
    forwards : IHTy1...
    apply record_compatibility...

  - Case "proj".
    inverts Ty2.
    forwards : IHTy1...
    apply record_compatibility in H...

  - Case "abs".
    inverts Ty2.
    pick_fresh x.
    forwards Imp : H8 x...
    forwards Imp2 : H1 Imp...
    eapply abs_compatibility...
    eapply uniq_from_swfte...
    inverts H2.

  - Case "capp".
    inverts Ty2.
    inverts Ty1.
    lets : inference_unique Ty1 H1.
    substs.
    forwards : IHTy1 H1.
    eapply coercion_compatibility1...
    eapply coercion_compatibility2...
Qed.



(* ********************************************************************** *)
(** * Congruence lemma *)

Lemma congruence : forall Δ Δ' Γ Γ' E1 E2 A A' e1 e2 dir dir' C c,
    CTyp C Δ Γ dir A Δ' Γ' dir' A' c ->
    has_type Δ Γ E1 dir A e1 ->
    has_type Δ Γ E2 dir A e2 ->
    E_open Δ Γ e1 e2 A A ->
    E_open Δ' Γ' (appctx c e1) (appctx c e2) A' A'.
Proof with eauto.
  introv Ctx.
  gen E1 E2 e1 e2.
  induction Ctx; introv Ty1 Ty2 EH; simpls...

  - Case "appL1".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply app_compatibility...

  - Case "appL2".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply app_compatibility...

  - Case "appR1".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply app_compatibility...

  - Case "appR2".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply app_compatibility...

  - Case "mergeL1".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply pair_compatibility...

  - Case "mergeL2".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply pair_compatibility...

  - Case "mergeR1".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply pair_compatibility...

  - Case "mergeR2".
    lets : IHCtx Ty1 Ty2 EH...
    lets : fundamental_prop H H.
    eapply pair_compatibility...

  - Case "rcd1".
    lets : IHCtx Ty1 Ty2 EH...
    apply record_compatibility...

  - Case "rcd2".
    lets : IHCtx Ty1 Ty2 EH...
    apply record_compatibility...

  - Case "proj1".
    lets : IHCtx Ty1 Ty2 EH...
    lets HH : record_compatibility...
    apply HH in H...

  - Case "proj2".
    lets : IHCtx Ty1 Ty2 EH...
    lets HH : record_compatibility...
    apply HH in H...

  - Case "abs1".
    lets : IHCtx Ty1 Ty2 EH...
    apply abs_compatibility with (x := x)...
    rewrite fv_exp_in_exp_close_exp_wrt_exp...
    rewrite fv_exp_in_exp_close_exp_wrt_exp...
    repeat rewrite~ open_exp_wrt_exp_close_exp_wrt_exp.

  - Case "abs2".
    lets : IHCtx Ty1 Ty2 EH...
    apply abs_compatibility with (x := x)...
    rewrite fv_exp_in_exp_close_exp_wrt_exp...
    rewrite fv_exp_in_exp_close_exp_wrt_exp...
    repeat rewrite open_exp_wrt_exp_close_exp_wrt_exp...

  - Case "tabs1".
    lets : IHCtx Ty1 Ty2 EH...
    apply tabs_compatibility with (X := X)...
    rewrite fv_ty_in_exp_close_exp_wrt_ty...
    rewrite fv_ty_in_exp_close_exp_wrt_ty...
    repeat rewrite~ open_exp_wrt_ty_close_exp_wrt_ty...

  - Case "tabs2".
    lets : IHCtx Ty1 Ty2 EH...
    apply tabs_compatibility with (X := X)...
    rewrite fv_ty_in_exp_close_exp_wrt_ty...
    rewrite fv_ty_in_exp_close_exp_wrt_ty...
    repeat rewrite~ open_exp_wrt_ty_close_exp_wrt_ty...


  - Case "tapp".
    lets : IHCtx Ty1 Ty2 EH...
    eapply tapp_compatibility...

  - Case "tapp".
    lets : IHCtx Ty1 Ty2 EH...
    eapply tapp_compatibility...

Qed.


(* ********************************************************************** *)
(** * Contextual equivalence *)

Definition kleene_equiv t1 t2 :=
  exists k, t1 ->* (exp_lit k) /\ t2 ->* (exp_lit k).


Definition ctx_equiv Δ Γ E1 E2 A := forall e1 e2 dir dir' C c,
    has_type Δ Γ E1 dir A e1 ->
    has_type Δ Γ E2 dir A e2 ->
    CTyp C Δ Γ dir A nil nil dir' sty_nat c ->
    kleene_equiv (appctx c e1) (appctx c e2).


(* ********************************************************************** *)
(** * Adequacy lemma *)

Lemma adequacy : forall e1 e2,
    E_open nil nil e1 e2 sty_nat sty_nat ->
    kleene_equiv e1 e2.
Proof with eauto.
  introv EH.
  destruct EH as (WF1 & WF2 & ? & ? & EH).
  specializes EH rel_d_empty rel_g_empty...
  simpls...
  destruct EH as (? & ? & ? & ? & ? & ? & ? & ? & ? & ? & VH)...
  destruct VH...
  unfolds.
  exists n...
Qed.


(* ********************************************************************** *)
(** * Coherence property *)

Theorem coherence : forall Δ Γ E A,
    ctx_equiv Δ Γ E E A.
Proof with eauto.
  intros.
  unfolds.
  introv Ty1 Ty2 Ctx.
  lets H : fundamental_prop Ty1 Ty2.
  lets HH : congruence Ctx Ty1 Ty2 H.
  apply adequacy in HH...
Qed.
